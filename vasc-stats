#!/usr/bin/python

import sys, argparse, os
sys.path.append('/Library/Python/2.6/site-packages/')
import read, proc, analysis, gui, parsers

import numpy as np

# add micron parameter for finding best location within
# plot enhanced contrast subzstacks
# compare to luminance, subtract
# plot dynamic line profile

if __name__ == '__main__':
    parser = parsers.get_vasc_stats_parser()
    args = parser.parse_args()

    gaussian = {'data':[]}
    lines = {'data':[]}

    for p in args.paths:
        """ VALIDATE """
        if args.angles > 180:
            sys.stderr.write('InputError: Given value for angles > 180\n')
            sys.exit(1)

        """ READ DATA """
        info, stack = read.get_data(p)
        
        """ PROCESS """
        thetas = proc.get_thetas(args.angles)
        avgmpp = (info['ympp'] + info['xmpp']) / 2
        probesize = (int(np.ceil(args.probesize[0] / avgmpp)), 
                     int(np.ceil(args.probesize[1] / avgmpp)))

        """ ANALYZE """
        views = {}
        """ luminance """
        if args.luminance_only or args.luminance:
            sys.stdout.write('luminance...')
            views = analysis.luminance(views, stack, thetas, 
                                       probesize)
    
        """ line profiles """    
        if not args.luminance_only:
            sys.stdout.write('line profiles...\n')
            views = analysis.line_profiles(views, stack, thetas, 
                                           args.downsample,
                                           args.gaussian,
                                           probesize)

        titles, results = analysis.print_misc_stats(p, views, 'line', 
                                                    write=False)
        lines['title'] = titles
        lines['data'].append(results)
        if args.gaussian:
            titles, results = analysis.print_misc_stats(p, views, 
                                                        'linegauss', 
                                                        write=False)
            gaussian['title'] = titles
            gaussian['data'].append(results)
    
    analysis.print_tddict(lines)
    if args.gaussian:
        analysis.print_tddict(gaussian)

