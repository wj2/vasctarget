#!/usr/bin/python

import sys, argparse, os
sys.path.append('/Library/Python/2.6/site-packages/')
import read, proc, analysis, gui

import numpy as np

# add micron parameter for finding best location within
# plot enhanced contrast subzstacks
# compare to luminance, subtract
# plot dynamic line profile

parser = argparse.ArgumentParser(description='provide targeting for probe insertion')
parser.add_argument('path', help='path to your 2photon data')
parser.add_argument('probesize', help='length (first) and thickness (second) of probe'
                    ' in microns', type=int, nargs=2)
parser.add_argument('-g', '--gaussian', help='smooth line profiles with a gaussian '
                    'filter (default on)', action='store_false', default=True)
parser.add_argument('-l', '--luminance', help='use luminance measure (default off)',
                    action='store_true')
parser.add_argument('-L', '--luminance-only', help='use ONLY luminance (default off)',
                    action='store_true')
parser.add_argument('-t', '--z-thickness', help='designate thickness (in microns) '
                    'of z-collapse in the sub-z stack (default 50)', type=int, 
                    default=50)
parser.add_argument('-a', '--angles', help='number of angles to use (default 6, max 180)',
                    type=int, default=6)
parser.add_argument('-d', '--downsample', help='number by which to downsample line profile'
                    ' analysis (default 3)', type=int, default=3)
parser.add_argument('-s', '--regionsize', help='size of region for best options marks '
                    '(default 50)', type=int, default=50)
parser.add_argument('-b', '--best-in-region', help='toggle best-in-region results rather '
                    'than all results (default on)', action='store_false', default=True)


args = parser.parse_args()


if __name__ == '__main__':    
    """ VALIDATE """
    if args.angles > 180:
        sys.stderr.write('InputError: Given value for angles > 180\n')
        sys.exit(1)

    if not os.path.isdir(args.path):
        sys.stderr.write('InputError: path given does not exist or is not dir\n')
        sys.exit(1)

    """ READ DATA """
    info, stack = read.get_data(args.path)

    """ PROCESS """
    """ collapse """

    # typical probesize is 70 23
    collstack = proc.collapse_stack(stack, info['z_width'], args.z_thickness)
    thetas = proc.get_thetas(args.angles)
    avgmpp = (info['ympp'] + info['xmpp']) / 2
    probesize = (int(np.ceil(args.probesize[0] / avgmpp)), 
             int(np.ceil(args.probesize[1] / avgmpp)))

    """ ANALYZE """
    views = {}
    """ luminance """
    if args.luminance_only or args.luminance:
        sys.stdout.write('luminance...')
        views = analysis.luminance(views, collstack, thetas, 
                               probesize)
    
    """ line profiles """    
    if not args.luminance_only:
        sys.stdout.write('line profiles...\n')
        views = analysis.line_profiles(views, collstack, thetas, 
                                       args.downsample,
                                       args.gaussian,
                                       probesize)

    analysis.print_misc_stats(args.path, views, 'line')
    if args.gaussian:
        analysis.print_misc_stats(args.path, views, 'linegauss')

    """ PRESENT """    
    gfig = gui.make_targeting_gui(collstack, thetas, probesize, views, args)
