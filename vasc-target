#!/usr/bin/python

import sys, argparse, os
sys.path.append('/Library/Python/2.6/site-packages/')
from bin import read, proc, analysis, gui, parsers

import numpy as np

# add micron parameter for finding best location within
# plot enhanced contrast subzstacks
# compare to luminance, subtract
# plot dynamic line profile

if __name__ == '__main__':    
    parser = parsers.get_vasc_target_parser()
    args = parser.parse_args()

    """ VALIDATE """
    if args.angles > 180:
        sys.stderr.write('InputError: Given value for angles > 180\n')
        sys.exit(1)

    """ READ DATA """
    info, stack = read.get_data(args.path, args.z_thickness, args.channel)

    """ PROCESS """
    thetas = proc.get_thetas(args.angles)
    avgmpp = (info['ympp'] + info['xmpp']) / 2
    probesize = (int(np.ceil(args.probesize[0] / avgmpp)), 
             int(np.ceil(args.probesize[1] / avgmpp)))

    """ ANALYZE """
    views = {}
    
    """ line profiles """    
    sys.stdout.write('line profiles...\n')
    views = analysis.line_profiles(views, stack, thetas, 
                                   args.downsample,
                                   args.gaussian,
                                   probesize)
    analysis.save_damage(args.path, views['line_notreduced'], args, 
                         probesize)
    

    analysis.print_misc_stats(args.path, views, 'line')
    if args.gaussian:
        analysis.print_misc_stats(args.path, views, 'linegauss')

    """ PRESENT """    
    gfig = gui.make_targeting_gui(stack, thetas, probesize, views, args)
