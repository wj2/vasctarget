#!/usr/bin/python

import sys, argparse, os
import read, proc, analysis, gui

import numpy as np

# add micron parameter for finding best location within
# plot enhanced contrast subzstacks
# compare to luminance, subtract
# plot dynamic line profile

# for param:
# thickness of collapse

parser = argparse.ArgumentParser(description='provide targetting for probe insertion')
parser.add_argument('path', help='path to your 2photon data')
parser.add_argument('-g', '--no-gui', help='toggle gui off', action='store_true')
parser.add_argument('-l', '--luminance', help='use luminance measure (default off)',
                    action='store_true')
parser.add_argument('-L', '--luminance-only', help='use ONLY luminance (default off)',
                    action='store_true')
parser.add_argument('-p', '--plot', help='plot the line profiles (default off)',
                    action='store_true')
parser.add_argument('-t', '--z-thickness', help='designate thickness (in microns) '
                    'of z-collapse in the sub-z stack (default 50)', type=int, 
                    default=50)
parser.add_argument('-z', '--zone-size', help='size of zones for giving best-in-region'
                    '-results (default 50)', type=int, default=50)
<<<<<<< HEAD
parser.add_argument('-a', '--angles', help='number of angles to use (default 6, max 180)',
                    type=int, default=6)
parser.add_argument('probesize', help='length (first) and thickness (second) of probe'
                    ' in microns', type=int, nargs=2)
parser.add_argument('-d', '--downsample', help='number by which to downsample line profile'
                    ' analysis (default 3)', type=int, default=3)

args = parser.parse_args()
print args
""" VALIDATE """
if args.angles > 180:
    sys.stderr.write('InputError: Given value for angles > 180')
    sys.exit(1)

if not os.path.isdir(args.path):
    sys.stderr.write('InputError: path given does not exist or is not dir')
    sys.exit(1)
    
""" READ DATA """
info, stack = read.get_data(args.path)

""" PROCESS """
""" collapse """
collstack = proc.collapse_stack(stack, info['z_width'], args.z_thickness)
thetas = proc.get_thetas(args.angles)
avgmpp = (info['ympp'] + info['xmpp']) / 2
probesize = (int(np.ceil(args.probesize[0] / avgmpp)), 
             int(np.ceil(args.probesize[1] / avgmpp)))

""" ANALYZE """
views = {}
""" luminance """
if args.luminance_only or args.luminance:
    sys.stdout.write('luminance...')
    views['luminance'] = analysis.luminance(collstack, thetas, 
                                            probesize)
""" line profiles """    
if not args.luminance_only:
    sys.stdout.write('line profiles...\n')
    views['line'], lineprofiles = analysis.line_profiles(collstack, thetas, 
                                                         args.downsample,
                                                         probesize)

""" PRESENT """
gfig = gui.make_gui(collstack, thetas, probesize, views, args)
=======

args = parser.parse_args()


""" READ DATA """


""" PROCESS """

if args.L or args.l:
    proc.luminance(
>>>>>>> c03e7a10598274d7483ac09c4f8f8cf0bf8fc77b
